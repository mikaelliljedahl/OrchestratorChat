@inject ISessionManager SessionManager
@implements IDisposable

<div class="d-flex align-center">
    @if (_currentSession != null)
    {
        <MudChip Color="Color.Success" Size="Size.Small" Class="mr-2">
            @_currentSession.Name
        </MudChip>
        <MudText Typo="Typo.caption">Session Active</MudText>
    }
    else
    {
        <MudChip Color="Color.Default" Size="Size.Small" Class="mr-2">
            No Session
        </MudChip>
    }
</div>

@code {
    private Core.Sessions.Session? _currentSession;
    private int _participantCount = 0;
    private Timer? _updateTimer;

    protected override async Task OnInitializedAsync()
    {
        await UpdateSession();
        _updateTimer = new Timer(async _ => await InvokeAsync(UpdateSession), null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    private async Task UpdateSession()
    {
        try
        {
            _currentSession = await SessionManager.GetCurrentSessionAsync();
            _participantCount = _currentSession?.ParticipantAgentIds?.Count ?? 0;
            await InvokeAsync(StateHasChanged);
        }
        catch
        {
            // Handle errors silently for the indicator
        }
    }

    public void Dispose()
    {
        _updateTimer?.Dispose();
    }
}