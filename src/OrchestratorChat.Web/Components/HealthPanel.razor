@using Microsoft.AspNetCore.SignalR.Client
@using OrchestratorChat.Web.Models
@using OrchestratorChat.Web.Services
@inject IHealthCheckService HealthCheckService
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<div class="health-panel">
    @if (_systemHealth?.OverallSeverity == HealthSeverity.OK)
    {
        <!-- Compact badges when everything is OK -->
        <div class="health-badges-compact">
            <MudTooltip Text="Connection & setup">
                <MudChip T="string" Size="Size.Small" Color="Color.Success" Icon="@Icons.Material.Filled.CheckCircle">
                    Ready
                </MudChip>
            </MudTooltip>
        </div>
    }
    else
    {
        <!-- Show status badges when there are issues -->
        <div class="health-badges">
            <MudTooltip Text="@GetClaudeTooltip()">
                <MudChip T="string" Size="Size.Small" Color="@GetClaudeColor()" Icon="@GetClaudeIcon()">
                    Claude CLI
                </MudChip>
            </MudTooltip>
            
            @if (ShowOpenRouterStatus)
            {
                <MudTooltip Text="@GetOpenRouterTooltip()">
                    <MudChip T="string" Size="Size.Small" Color="@GetOpenRouterColor()" Icon="@GetOpenRouterIcon()">
                        OpenRouter
                    </MudChip>
                </MudTooltip>
            }
            
            <MudTooltip Text="@GetAnthropicTooltip()">
                <MudChip T="string" Size="Size.Small" Color="@GetAnthropicColor()" Icon="@GetAnthropicIcon()">
                    Anthropic
                </MudChip>
            </MudTooltip>
            
            <MudTooltip Text="@GetHubsTooltip()">
                <MudChip T="string" Size="Size.Small" Color="@GetHubsColor()" Icon="@GetHubsIcon()">
                    Connections
                </MudChip>
            </MudTooltip>
            
            @if (!string.IsNullOrEmpty(SelectedAgentId))
            {
                <MudTooltip Text="@GetAgentTooltip()">
                    <MudChip T="string" Size="Size.Small" Color="@GetAgentColor()" Icon="@GetAgentIcon()">
                        Agent
                    </MudChip>
                </MudTooltip>
            }
        </div>
        
        <!-- Expandable diagnostics panel for errors -->
        @if (_systemHealth?.OverallSeverity == HealthSeverity.Error && ShowDiagnostics)
        {
            <MudExpansionPanels Class="health-diagnostics mt-2" Elevation="1">
                <MudExpansionPanel Text="Connection & setup">
                    <div class="health-details">
                        <MudList T="object" Dense="true">
                            <MudListItem T="object">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetClaudeIcon()" Color="@GetClaudeColor()" Class="mr-2" />
                                    <MudText>Claude CLI: @GetClaudeStatusText()</MudText>
                                    @if (_systemHealth.ClaudeCli == ProviderStatus.NotFound)
                                    {
                                        <MudSpacer />
                                        <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" 
                                                  OnClick="@InstallClaudeCli" StartIcon="@Icons.Material.Filled.Download">
                                            Install Claude CLI
                                        </MudButton>
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" 
                                                  OnClick="@RetryClaudeDetection" StartIcon="@Icons.Material.Filled.Refresh">
                                            Retry
                                        </MudButton>
                                    }
                                </div>
                            </MudListItem>
                            
                            @if (ShowOpenRouterStatus)
                            {
                                <MudListItem T="object">
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@GetOpenRouterIcon()" Color="@GetOpenRouterColor()" Class="mr-2" />
                                        <MudText>OpenRouter key: @GetOpenRouterStatusText()</MudText>
                                        @if (_systemHealth.OpenRouterKey == ProviderStatus.Missing)
                                        {
                                            <MudSpacer />
                                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" 
                                                      OnClick="@(() => _showOpenRouterKeyInput = !_showOpenRouterKeyInput)"
                                                      StartIcon="@Icons.Material.Filled.Key">
                                                Add API key
                                            </MudButton>
                                        }
                                    </div>
                                    @if (_showOpenRouterKeyInput && _systemHealth.OpenRouterKey == ProviderStatus.Missing)
                                    {
                                        <div class="mt-2 ml-4">
                                            <MudTextField @bind-Value="_openRouterKeyInput" 
                                                         Label="OpenRouter API key" 
                                                         InputType="InputType.Password"
                                                         Variant="Variant.Outlined" 
                                                         Margin="Margin.Dense" />
                                            <div class="mt-1">
                                                <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                                          Disabled="@string.IsNullOrWhiteSpace(_openRouterKeyInput)"
                                                          OnClick="@SaveOpenRouterKey">
                                                    Save & Validate
                                                </MudButton>
                                                <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Default"
                                                          OnClick="@(() => _showOpenRouterKeyInput = false)" Class="ml-2">
                                                    Cancel
                                                </MudButton>
                                            </div>
                                        </div>
                                    }
                                </MudListItem>
                            }
                            
                            <MudListItem T="object">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetAnthropicIcon()" Color="@GetAnthropicColor()" Class="mr-2" />
                                    <MudText>Anthropic key: @GetAnthropicStatusText()</MudText>
                                    @if (_systemHealth.AnthropicKey == ProviderStatus.Missing)
                                    {
                                        <MudSpacer />
                                        <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" 
                                                  OnClick="@(() => _showAnthropicKeyInput = !_showAnthropicKeyInput)"
                                                  StartIcon="@Icons.Material.Filled.Key">
                                            Add API key
                                        </MudButton>
                                    }
                                </div>
                                @if (_showAnthropicKeyInput && _systemHealth.AnthropicKey == ProviderStatus.Missing)
                                {
                                    <div class="mt-2 ml-4">
                                        <MudTextField @bind-Value="_anthropicKeyInput" 
                                                     Label="Anthropic API key" 
                                                     InputType="InputType.Password"
                                                     Variant="Variant.Outlined" 
                                                     Margin="Margin.Dense" />
                                        <div class="mt-1">
                                            <MudButton Size="Size.Small" Variant="Variant.Filled" Color="Color.Primary"
                                                      Disabled="@string.IsNullOrWhiteSpace(_anthropicKeyInput)"
                                                      OnClick="@SaveAnthropicKey">
                                                Save & Validate
                                            </MudButton>
                                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Default"
                                                      OnClick="@(() => _showAnthropicKeyInput = false)" Class="ml-2">
                                                Cancel
                                            </MudButton>
                                        </div>
                                    </div>
                                }
                            </MudListItem>
                            
                            <MudListItem T="object">
                                <div class="d-flex align-center">
                                    <MudIcon Icon="@GetHubsIcon()" Color="@GetHubsColor()" Class="mr-2" />
                                    <MudText>@GetHubsStatusText()</MudText>
                                    @if (_systemHealth.OrchestratorHub == HubConnectionStatus.Disconnected || _systemHealth.AgentHub == HubConnectionStatus.Disconnected)
                                    {
                                        <MudSpacer />
                                        <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" 
                                                  OnClick="@RequestReconnect" StartIcon="@Icons.Material.Filled.Refresh">
                                            Reconnect
                                        </MudButton>
                                    }
                                </div>
                            </MudListItem>
                            
                            @if (!string.IsNullOrEmpty(SelectedAgentId) && _agentHealth != null)
                            {
                                <MudListItem T="object">
                                    <div class="d-flex align-center">
                                        <MudIcon Icon="@GetAgentIcon()" Color="@GetAgentColor()" Class="mr-2" />
                                        <MudText>Agent status: @GetAgentStatusText()</MudText>
                                        @if (_agentHealth.Status == AgentInitializationStatus.Error)
                                        {
                                            <MudSpacer />
                                            <MudButton Size="Size.Small" Variant="Variant.Text" Color="Color.Primary" 
                                                      OnClick="@ShowAgentDetails" StartIcon="@Icons.Material.Filled.Info">
                                                View details
                                            </MudButton>
                                            <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" 
                                                      OnClick="@RetryAgentInitialization" StartIcon="@Icons.Material.Filled.Refresh">
                                                Retry initialization
                                            </MudButton>
                                        }
                                    </div>
                                </MudListItem>
                            }
                        </MudList>
                    </div>
                </MudExpansionPanel>
            </MudExpansionPanels>
        }
    }
</div>

@code {
    [Parameter] public HubConnection? OrchestratorHub { get; set; }
    [Parameter] public HubConnection? AgentHub { get; set; }
    [Parameter] public string? SelectedAgentId { get; set; }
    [Parameter] public bool ShowDiagnostics { get; set; } = true;
    [Parameter] public bool ShowOpenRouterStatus { get; set; } = true;
    [Parameter] public EventCallback OnReconnectRequested { get; set; }
    [Parameter] public EventCallback<string> OnAgentRetryRequested { get; set; }
    [Parameter] public EventCallback OnHealthUpdated { get; set; }
    
    private SystemHealthStatus? _systemHealth;
    private AgentHealthStatus? _agentHealth;
    private bool _showOpenRouterKeyInput = false;
    private bool _showAnthropicKeyInput = false;
    private string _openRouterKeyInput = string.Empty;
    private string _anthropicKeyInput = string.Empty;
    private Timer? _healthCheckTimer;
    
    protected override async Task OnInitializedAsync()
    {
        await RefreshHealthStatus();
        
        // Start periodic health checks (every 10 seconds to avoid excessive API calls)
        _healthCheckTimer = new Timer(async _ => await RefreshHealthStatus(), null, TimeSpan.Zero, TimeSpan.FromSeconds(10));
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await RefreshHealthStatus();
    }
    
    private async Task RefreshHealthStatus()
    {
        try
        {
            _systemHealth = await HealthCheckService.GetSystemHealthAsync();
            
            // Update hub connection status
            if (_systemHealth != null)
            {
                _systemHealth.OrchestratorHub = HealthCheckService.GetHubConnectionStatus(OrchestratorHub);
                _systemHealth.AgentHub = HealthCheckService.GetHubConnectionStatus(AgentHub);
            }
            
            // Get agent health if agent is selected
            if (!string.IsNullOrEmpty(SelectedAgentId))
            {
                _agentHealth = await HealthCheckService.GetAgentHealthAsync(SelectedAgentId);
            }
            
            await InvokeAsync(StateHasChanged);
            await OnHealthUpdated.InvokeAsync();
        }
        catch (Exception ex)
        {
            // Log error but don't throw - health panel should be resilient
            Console.WriteLine($"Health check failed: {ex.Message}");
        }
    }
    
    private async Task InstallClaudeCli()
    {
        await JSRuntime.InvokeVoidAsync("open", "https://docs.anthropic.com/claude/reference/cli", "_blank");
    }
    
    private async Task RetryClaudeDetection()
    {
        var result = await HealthCheckService.RetryClaudeDetectionAsync();
        if (_systemHealth != null)
        {
            _systemHealth.ClaudeCli = result;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task SaveOpenRouterKey()
    {
        if (string.IsNullOrWhiteSpace(_openRouterKeyInput))
            return;
            
        var result = await HealthCheckService.SaveOpenRouterKeyAsync(_openRouterKeyInput);
        if (result.IsValid && _systemHealth != null)
        {
            _systemHealth.OpenRouterKey = result.Status;
            _showOpenRouterKeyInput = false;
            _openRouterKeyInput = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task SaveAnthropicKey()
    {
        if (string.IsNullOrWhiteSpace(_anthropicKeyInput))
            return;
            
        var result = await HealthCheckService.SaveAnthropicKeyAsync(_anthropicKeyInput);
        if (result.IsValid && _systemHealth != null)
        {
            _systemHealth.AnthropicKey = result.Status;
            _showAnthropicKeyInput = false;
            _anthropicKeyInput = string.Empty;
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task RequestReconnect()
    {
        await OnReconnectRequested.InvokeAsync();
    }
    
    private async Task RetryAgentInitialization()
    {
        if (!string.IsNullOrEmpty(SelectedAgentId))
        {
            await OnAgentRetryRequested.InvokeAsync(SelectedAgentId);
        }
    }
    
    private Task ShowAgentDetails()
    {
        // TODO: Show agent error details in a dialog
        return Task.CompletedTask;
    }
    
    // Status text methods
    private string GetClaudeStatusText() => _systemHealth?.ClaudeCli == ProviderStatus.Detected ? "Detected" : "Not found";
    private string GetOpenRouterStatusText() => _systemHealth?.OpenRouterKey == ProviderStatus.Present ? "Present" : "Missing";
    private string GetAnthropicStatusText() => _systemHealth?.AnthropicKey == ProviderStatus.Present ? "Present" : "Missing";
    private string GetAgentStatusText() => _agentHealth?.Status switch
    {
        AgentInitializationStatus.Initialized => "Ready",
        AgentInitializationStatus.Error => "Error initializing",
        _ => "Initializing"
    };
    
    private string GetHubsStatusText()
    {
        if (_systemHealth?.OrchestratorHub == HubConnectionStatus.Connected && _systemHealth?.AgentHub == HubConnectionStatus.Connected)
            return "Connected";
        if (_systemHealth?.OrchestratorHub == HubConnectionStatus.Reconnecting || _systemHealth?.AgentHub == HubConnectionStatus.Reconnecting)
            return "Reconnecting";
        return "Disconnected";
    }
    
    // Tooltip methods
    private string GetClaudeTooltip() => $"Claude CLI: {GetClaudeStatusText()}";
    private string GetOpenRouterTooltip() => $"OpenRouter key: {GetOpenRouterStatusText()}";
    private string GetAnthropicTooltip() => $"Anthropic key: {GetAnthropicStatusText()}";
    private string GetHubsTooltip() => $"OrchestratorHub & AgentHub: {GetHubsStatusText()}";
    private string GetAgentTooltip() => $"Agent status: {GetAgentStatusText()}";
    
    // Color methods
    private Color GetClaudeColor() => _systemHealth?.ClaudeCli == ProviderStatus.Detected ? Color.Success : Color.Error;
    private Color GetOpenRouterColor() => _systemHealth?.OpenRouterKey == ProviderStatus.Present ? Color.Success : Color.Error;
    private Color GetAnthropicColor() => _systemHealth?.AnthropicKey == ProviderStatus.Present ? Color.Success : Color.Warning;
    private Color GetAgentColor() => _agentHealth?.Severity switch
    {
        HealthSeverity.OK => Color.Success,
        HealthSeverity.Warning => Color.Warning,
        HealthSeverity.Error => Color.Error,
        _ => Color.Default
    };
    
    private Color GetHubsColor()
    {
        if (_systemHealth?.OrchestratorHub == HubConnectionStatus.Connected && _systemHealth?.AgentHub == HubConnectionStatus.Connected)
            return Color.Success;
        if (_systemHealth?.OrchestratorHub == HubConnectionStatus.Reconnecting || _systemHealth?.AgentHub == HubConnectionStatus.Reconnecting)
            return Color.Warning;
        return Color.Error;
    }
    
    // Icon methods
    private string GetClaudeIcon() => _systemHealth?.ClaudeCli == ProviderStatus.Detected ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error;
    private string GetOpenRouterIcon() => _systemHealth?.OpenRouterKey == ProviderStatus.Present ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error;
    private string GetAnthropicIcon() => _systemHealth?.AnthropicKey == ProviderStatus.Present ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Warning;
    private string GetAgentIcon() => _agentHealth?.Severity switch
    {
        HealthSeverity.OK => Icons.Material.Filled.CheckCircle,
        HealthSeverity.Warning => Icons.Material.Filled.Warning,
        HealthSeverity.Error => Icons.Material.Filled.Error,
        _ => Icons.Material.Filled.Help
    };
    
    private string GetHubsIcon()
    {
        if (_systemHealth?.OrchestratorHub == HubConnectionStatus.Connected && _systemHealth?.AgentHub == HubConnectionStatus.Connected)
            return Icons.Material.Filled.CheckCircle;
        if (_systemHealth?.OrchestratorHub == HubConnectionStatus.Reconnecting || _systemHealth?.AgentHub == HubConnectionStatus.Reconnecting)
            return Icons.Material.Filled.Sync;
        return Icons.Material.Filled.Error;
    }
    
    public ValueTask DisposeAsync()
    {
        _healthCheckTimer?.Dispose();
        return ValueTask.CompletedTask;
    }
}

<style>
    .health-panel {
        margin-bottom: 8px;
    }
    
    .health-badges-compact,
    .health-badges {
        display: flex;
        gap: 4px;
        flex-wrap: wrap;
        align-items: center;
    }
    
    .health-diagnostics {
        border: 1px solid var(--mud-palette-lines-default);
        border-radius: 4px;
    }
    
    .health-details {
        padding: 8px;
    }
</style>