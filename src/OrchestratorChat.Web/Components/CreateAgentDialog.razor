@using OrchestratorChat.Core.Agents
@using OrchestratorChat.Web.Models
@using Microsoft.JSInterop
@inject HttpClient HttpClient
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation

<MudDialog Visible="@IsVisible" VisibleChanged="@OnVisibilityChanged">
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Add" Class="mr-3" />
            Create New Agent
        </MudText>
    </TitleContent>
    
    <DialogContent>
        <MudGrid>
            <MudItem xs="12">
                <MudTextField @bind-Value="_agentName" 
                             Label="Agent Name" 
                             Variant="Variant.Outlined" 
                             Required="true" 
                             Error="@(!string.IsNullOrEmpty(_nameError))" 
                             ErrorText="@_nameError" />
            </MudItem>
            
            <MudItem xs="12">
                <MudSelect @bind-Value="_selectedType" 
                          Label="Agent Type" 
                          Variant="Variant.Outlined" 
                          Required="true">
                    <MudSelectItem Value="AgentType.Claude">Claude</MudSelectItem>
                    <MudSelectItem Value="AgentType.Saturn">Saturn</MudSelectItem>
                </MudSelect>
            </MudItem>
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_workingDirectory" 
                             Label="Working Directory" 
                             Variant="Variant.Outlined" 
                             Placeholder="@Environment.CurrentDirectory" />
            </MudItem>
            
            <MudItem xs="12">
                <MudSelect @bind-Value="_selectedModel" 
                          Label="Model" 
                          Variant="Variant.Outlined">
                    @if (_selectedType == AgentType.Claude)
                    {
                        <MudSelectItem Value="@("claude-sonnet-4-20250514")">Claude Sonnet 4</MudSelectItem>
                        <MudSelectItem Value="@("claude-3-5-sonnet-20241022")">Claude 4.1 Opus</MudSelectItem>
                    }
                    else if (_selectedType == AgentType.Saturn)
                    {
                        <MudSelectItem Value="@("claude-sonnet-4-20250514")">Claude Sonnet 4</MudSelectItem>
                        <MudSelectItem Value="@("claude-3-5-sonnet-20241022")">Claude 4.1 Opus</MudSelectItem>
                        <MudSelectItem Value="@("gpt-5")">GPT-5</MudSelectItem>
                        <MudSelectItem Value="@("gpt-5-mini")">GPT-5 Mini</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            
            @if (_selectedType == AgentType.Saturn)
            {
                <MudItem xs="12">
                    <MudSelect T="string" 
                              Value="_selectedProvider" 
                              ValueChanged="OnProviderChanged"
                              Label="Provider" 
                              Variant="Variant.Outlined">
                        <MudSelectItem Value="@("OpenRouter")">OpenRouter (API Key)</MudSelectItem>
                        <MudSelectItem Value="@("Anthropic")">Anthropic (OAuth)</MudSelectItem>
                    </MudSelect>
                </MudItem>
                
                @if (_selectedProvider == "Anthropic")
                {
                    <MudItem xs="12">
                        <MudPaper Class="pa-3" Outlined="true">
                            <MudText Typo="Typo.subtitle2" Class="mb-2">Anthropic OAuth Authentication</MudText>
                            
                            @if (_anthropicOAuthStatus?.Connected == true)
                            {
                                <MudAlert Severity="Severity.Success" Class="mb-2">
                                    <div style="display: flex; align-items: center; justify-content: space-between;">
                                        <span>Connected to Anthropic</span>
                                        <MudButton Color="Color.Error" 
                                                  Variant="Variant.Text" 
                                                  Size="Size.Small" 
                                                  OnClick="DisconnectAnthropicOAuth">
                                            Disconnect
                                        </MudButton>
                                    </div>
                                </MudAlert>
                            }
                            else
                            {
                                <MudAlert Severity="Severity.Warning" Class="mb-2">
                                    Not connected to Anthropic.
                                </MudAlert>
                                
                                <div class="d-flex gap-2 mb-2">
                                    @if (string.IsNullOrEmpty(_authorizationUrl))
                                    {
                                        <MudButton Color="Color.Primary" 
                                                  Variant="Variant.Filled" 
                                                  OnClick="GetAnthropicOAuthUrl"
                                                  Disabled="@_oauthInProgress">
                                            @if (_oauthInProgress)
                                            {
                                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                                <MudText>Loading...</MudText>
                                            }
                                            else
                                            {
                                                <MudText>Connect to Anthropic</MudText>
                                            }
                                        </MudButton>
                                    }
                                    else
                                    {
                                        <MudButton Color="Color.Primary" 
                                                  Variant="Variant.Filled"
                                                  Href="@_authorizationUrl"
                                                  Target="_blank"
                                                  OnClick="@(() => _showCodeInput = true)">
                                            <MudText>Connect to Anthropic</MudText>
                                        </MudButton>
                                    }
                                    
                                    <MudButton Color="Color.Secondary" 
                                              Variant="Variant.Outlined" 
                                              OnClick="CheckAnthropicOAuthStatus">
                                        <MudIcon Icon="@Icons.Material.Filled.Refresh" Class="mr-1" />
                                        <MudText>Check Status</MudText>
                                    </MudButton>
                                </div>
                                
                                @if (_showCodeInput)
                                {
                                    <MudPaper Class="pa-3 mt-3" Elevation="0" Outlined="true">
                                        <MudText Typo="Typo.subtitle2" Class="mb-2">Step 2: Enter Authorization Code</MudText>
                                        <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mb-2">
                                            After authorizing in Anthropic, copy the authorization code and paste it here:
                                        </MudText>
                                        <MudTextField @bind-Value="_authorizationCode" 
                                                      Label="Authorization Code" 
                                                      Variant="Variant.Outlined"
                                                      Placeholder="Paste the code from Anthropic here"
                                                      Class="mb-2" />
                                        <MudButton Color="Color.Primary" 
                                                  Variant="Variant.Filled"
                                                  OnClick="@SubmitAuthorizationCode"
                                                  Disabled="@(string.IsNullOrWhiteSpace(_authorizationCode) || _oauthInProgress)">
                                            @if (_oauthInProgress)
                                            {
                                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                                                <MudText>Submitting...</MudText>
                                            }
                                            else
                                            {
                                                <MudText>Submit Code</MudText>
                                            }
                                        </MudButton>
                                    </MudPaper>
                                }
                                else
                                {
                                    <MudText Typo="Typo.body2" Color="Color.Secondary" Class="mt-2">
                                        Note: You can create the agent without connecting. It will require OAuth setup before first use.
                                    </MudText>
                                }
                            }
                        </MudPaper>
                    </MudItem>
                }
            }
            else if (_selectedType == AgentType.Claude)
            {
                <MudItem xs="12">
                    <MudAlert Severity="Severity.Info">
                        Claude agents use the locally installed Claude CLI. Make sure you have Claude CLI installed and authenticated.
                    </MudAlert>
                </MudItem>
            }
            
            <MudItem xs="12">
                <MudTextField @bind-Value="_systemPrompt" 
                             Label="System Prompt" 
                             Variant="Variant.Outlined" 
                             Lines="3" 
                             Placeholder="Optional system prompt for the agent..." />
            </MudItem>
            
            <MudItem xs="6">
                <MudNumericField @bind-Value="_temperature" 
                                Label="Temperature" 
                                Variant="Variant.Outlined" 
                                Min="0.0" 
                                Max="2.0" 
                                Step="0.1" />
            </MudItem>
            
            <MudItem xs="6">
                <MudNumericField @bind-Value="_maxTokens" 
                                Label="Max Tokens" 
                                Variant="Variant.Outlined" 
                                Min="100" 
                                Max="8000" 
                                Step="100" />
            </MudItem>
            
            <MudItem xs="12">
                <MudCheckBox @bind-Value="_requireApproval" 
                            Label="Require approval for tool execution" />
            </MudItem>
        </MudGrid>
    </DialogContent>
    
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>
        <MudButton Color="Color.Primary" 
                  Variant="Variant.Filled" 
                  OnClick="CreateAgent" 
                  Disabled="@_isCreating">
            @if (_isCreating)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Creating...</MudText>
            }
            else
            {
                <MudText>Create Agent</MudText>
            }
        </MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<AgentConfiguration> OnAgentCreated { get; set; }
    
    private async Task OnVisibilityChanged(bool isVisible)
    {
        Console.WriteLine($"CreateAgentDialog.OnVisibilityChanged: Visibility changed to {isVisible}");
        IsVisible = isVisible;
        
        // Reset form when dialog opens
        if (isVisible)
        {
            ResetForm();
        }
        
        if (IsVisibleChanged.HasDelegate)
        {
            await IsVisibleChanged.InvokeAsync(isVisible);
        }
    }
    
    private string _agentName = string.Empty;
    private AgentType _selectedType = AgentType.Claude;
    private string _workingDirectory = string.Empty;
    private string _selectedModel = "claude-sonnet-4-20250514";
    private string _selectedProvider = "OpenRouter";
    private string _systemPrompt = string.Empty;
    private double _temperature = 0.7;
    private int _maxTokens = 4096;
    private bool _requireApproval = false;
    
    private bool _isCreating = false;
    private string _nameError = string.Empty;
    
    // Anthropic OAuth state
    private AnthropicOAuthStatus? _anthropicOAuthStatus = new AnthropicOAuthStatus { Connected = false, ExpiresAt = null, Scopes = Array.Empty<string>() };
    private bool _oauthInProgress = false;
    private string? _authorizationUrl = null;
    private string? _oauthState = null;
    private string _authorizationCode = string.Empty;
    private bool _showCodeInput = false;
    
    private async Task Cancel()
    {
        Console.WriteLine("CreateAgentDialog.Cancel: Cancelling dialog");
        ResetForm();
        await OnVisibilityChanged(false);
    }
    
    private void ResetForm()
    {
        Console.WriteLine("CreateAgentDialog.ResetForm: Resetting form fields");
        _agentName = string.Empty;
        _selectedType = AgentType.Claude;
        _workingDirectory = string.Empty;
        _selectedModel = "claude-sonnet-4-20250514";
        _selectedProvider = "OpenRouter";
        _systemPrompt = string.Empty;
        _temperature = 0.7;
        _maxTokens = 4096;
        _requireApproval = false;
        _nameError = string.Empty;
        _isCreating = false;
        
        // Reset OAuth state
        _anthropicOAuthStatus = new AnthropicOAuthStatus { Connected = false, ExpiresAt = null, Scopes = Array.Empty<string>() };
        _oauthInProgress = false;
        _authorizationUrl = null;
        _oauthState = null;
        _authorizationCode = string.Empty;
        _showCodeInput = false;
        
        // Load OAuth status when form opens
        if (IsVisible)
        {
            _ = CheckAnthropicOAuthStatus();
        }
    }
    
    private async Task CreateAgent()
    {
        Console.WriteLine("CreateAgentDialog.CreateAgent: Method started");
        _nameError = string.Empty;
        
        if (string.IsNullOrWhiteSpace(_agentName))
        {
            _nameError = "Agent name is required";
            Console.WriteLine("CreateAgentDialog.CreateAgent: Agent name validation failed");
            return;
        }
        
        // Note: Don't block creation if disconnected - agent persists as "requires connect"
        // This allows users to create the agent configuration even if OAuth is not set up
        
        Console.WriteLine($"CreateAgentDialog.CreateAgent: Creating agent '{_agentName}' of type '{_selectedType}'");
        _isCreating = true;
        StateHasChanged();
        
        try
        {
            var configuration = new AgentConfiguration
            {
                Name = _agentName.Trim(),
                Type = _selectedType,
                WorkingDirectory = string.IsNullOrWhiteSpace(_workingDirectory) ? Environment.CurrentDirectory : _workingDirectory.Trim(),
                Model = _selectedModel,
                Temperature = _temperature,
                MaxTokens = _maxTokens,
                SystemPrompt = _systemPrompt.Trim(),
                RequireApproval = _requireApproval
            };
            
            // Add provider setting for Saturn agents
            if (_selectedType == AgentType.Saturn)
            {
                configuration.CustomSettings["Provider"] = _selectedProvider;
            }
            
            Console.WriteLine($"CreateAgentDialog.CreateAgent: Configuration created, invoking callback");
            
            // Notify parent with the configuration first
            Console.WriteLine($"CreateAgentDialog.CreateAgent: OnAgentCreated.HasDelegate = {OnAgentCreated.HasDelegate}");
            if (OnAgentCreated.HasDelegate)
            {
                Console.WriteLine("CreateAgentDialog.CreateAgent: Invoking OnAgentCreated callback");
                await OnAgentCreated.InvokeAsync(configuration);
            }
            
            Console.WriteLine($"CreateAgentDialog.CreateAgent: Closing dialog");
            // Reset form and close dialog after successful callback
            ResetForm();
            await OnVisibilityChanged(false);
            Console.WriteLine("CreateAgentDialog.CreateAgent: Method completed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"CreateAgentDialog.CreateAgent: Exception occurred: {ex.Message}");
            Console.WriteLine($"CreateAgentDialog.CreateAgent: Exception details: {ex}");
            _nameError = $"Error creating agent: {ex.Message}";
        }
        finally
        {
            _isCreating = false;
            StateHasChanged();
        }
    }
    
    private async Task OnProviderChanged(string provider)
    {
        _selectedProvider = provider;
        StateHasChanged();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && _selectedType == AgentType.Saturn && _selectedProvider == "Anthropic")
        {
            await CheckAnthropicOAuthStatus();
        }
    }
    
    private async Task CheckAnthropicOAuthStatus()
    {
        try
        {
            var response = await HttpClient.GetAsync($"{Navigation.BaseUri}api/providers/anthropic/status");
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                _anthropicOAuthStatus = System.Text.Json.JsonSerializer.Deserialize<AnthropicOAuthStatus>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else
            {
                _anthropicOAuthStatus = new AnthropicOAuthStatus
                {
                    Connected = false,
                    ExpiresAt = null,
                    Scopes = Array.Empty<string>()
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to check Anthropic OAuth status: {ex.Message}");
            _anthropicOAuthStatus = new AnthropicOAuthStatus
            {
                Connected = false,
                ExpiresAt = null,
                Scopes = Array.Empty<string>()
            };
        }
        finally
        {
            StateHasChanged();
        }
    }
    
    private async Task GetAnthropicOAuthUrl()
    {
        try
        {
            _oauthInProgress = true;
            StateHasChanged();
            
            // Get the authorization URL from the server
            var response = await HttpClient.PostAsync($"{Navigation.BaseUri}api/providers/anthropic/start", null);
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var startResponse = System.Text.Json.JsonSerializer.Deserialize<AnthropicOAuthStartResponse>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
                
                if (!string.IsNullOrEmpty(startResponse?.AuthUrl))
                {
                    _authorizationUrl = startResponse.AuthUrl;
                    _oauthState = startResponse.State;
                }
                else
                {
                    Console.WriteLine("No authorization URL received");
                }
            }
            else
            {
                Console.WriteLine($"Failed to start OAuth: {response.StatusCode}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error starting OAuth: {ex.Message}");
        }
        finally
        {
            if (!_oauthInProgress) // Only reset if we're not polling
            {
                _oauthInProgress = false;
                StateHasChanged();
            }
        }
    }
    
    private async Task SubmitAuthorizationCode()
    {
        try
        {
            _oauthInProgress = true;
            StateHasChanged();
            
            // Submit the authorization code to the server
            var requestBody = new 
            {
                code = _authorizationCode,
                state = _oauthState
            };
            
            var content = new StringContent(
                System.Text.Json.JsonSerializer.Serialize(requestBody),
                System.Text.Encoding.UTF8,
                "application/json");
            
            var response = await HttpClient.PostAsync($"{Navigation.BaseUri}api/providers/anthropic/submit-code", content);
            
            if (response.IsSuccessStatusCode)
            {
                // Clear the code input
                _authorizationCode = string.Empty;
                _showCodeInput = false;
                
                // Check status to confirm connection
                await CheckAnthropicOAuthStatus();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Failed to submit code: {errorContent}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting code: {ex.Message}");
        }
        finally
        {
            _oauthInProgress = false;
            StateHasChanged();
        }
    }
    
    private async Task PollForOAuthCompletion()
    {
        const int maxAttempts = 60; // Poll for up to 5 minutes (5 second intervals)
        const int intervalMs = 5000;
        
        for (int attempt = 0; attempt < maxAttempts && _oauthInProgress; attempt++)
        {
            await Task.Delay(intervalMs);
            
            if (!_oauthInProgress) break;
            
            try
            {
                await CheckAnthropicOAuthStatus();
                
                if (_anthropicOAuthStatus?.Connected == true)
                {
                    _oauthInProgress = false;
                    StateHasChanged();
                    break;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error polling OAuth status: {ex.Message}");
            }
        }
        
        if (_oauthInProgress)
        {
            _oauthInProgress = false;
            StateHasChanged();
        }
    }
    
    
    private async Task DisconnectAnthropicOAuth()
    {
        try
        {
            var response = await HttpClient.PostAsync($"{Navigation.BaseUri}api/providers/anthropic/logout", null);
            if (response.IsSuccessStatusCode)
            {
                await CheckAnthropicOAuthStatus();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error disconnecting OAuth: {ex.Message}");
        }
    }
    
    
    public class AnthropicOAuthStartResponse
    {
        public string AuthUrl { get; set; } = string.Empty;
        public string State { get; set; } = string.Empty;
    }
    
}