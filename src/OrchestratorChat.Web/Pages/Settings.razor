@page "/settings"
@using OrchestratorChat.Web.Components

<PageTitle>Settings</PageTitle>

<MudText Typo="Typo.h4" Class="mb-4">Settings</MudText>

<MudTabs Elevation="4" Rounded="true" ApplyEffectsToContainer="true">
    <MudTabPanel Text="Agents">
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-3">Agent Configuration</MudText>
                
                <MudGrid>
                    <MudItem xs="12" md="6">
                        <MudTextField Label="Default Working Directory" 
                                    @bind-Value="_defaultWorkingDirectory"
                                    Variant="Variant.Outlined"
                                    Adornment="Adornment.End"
                                    AdornmentIcon="@Icons.Material.Filled.FolderOpen" />
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudNumericField Label="Default Timeout (seconds)" 
                                       @bind-Value="_defaultTimeoutSeconds"
                                       Variant="Variant.Outlined" />
                    </MudItem>
                </MudGrid>
                
                <MudSwitch @bind-Checked="_enableAutoSave" 
                         Label="Auto-save sessions" 
                         Class="mt-3" />
                
                <MudSwitch @bind-Checked="_enableLogging" 
                         Label="Enable detailed logging" 
                         Class="mt-2" />
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
    
    <MudTabPanel Text="MCP">
        <McpConfiguration />
    </MudTabPanel>
    
    <MudTabPanel Text="Interface">
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-3">User Interface</MudText>
                
                <MudSelect @bind-Value="_theme" 
                         Label="Theme" 
                         Variant="Variant.Outlined"
                         Class="mb-3">
                    <MudSelectItem Value="Theme.Light">Light</MudSelectItem>
                    <MudSelectItem Value="Theme.Dark">Dark</MudSelectItem>
                    <MudSelectItem Value="Theme.Auto">Auto</MudSelectItem>
                </MudSelect>
                
                <MudSlider @bind-Value="_fontSize" 
                          Min="10" Max="20" Step="1"
                          TickMarks="true"
                          TickMarkLabels="@_fontSizeLabels">
                    Font Size: @_fontSize px
                </MudSlider>
                
                <MudSwitch @bind-Checked="_enableAnimations" 
                         Label="Enable animations" 
                         Class="mt-3" />
                
                <MudSwitch @bind-Checked="_enableSounds" 
                         Label="Enable notification sounds" 
                         Class="mt-2" />
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
    
    <MudTabPanel Text="Security">
        <MudCard Class="mt-4">
            <MudCardContent>
                <MudText Typo="Typo.h6" Class="mb-3">Security Settings</MudText>
                
                <MudSwitch @bind-Checked="_encryptSessions" 
                         Label="Encrypt saved sessions" 
                         Class="mb-3" />
                
                <MudSwitch @bind-Checked="_requireAuthentication" 
                         Label="Require authentication" 
                         Class="mb-3" />
                
                <MudNumericField Label="Session Timeout (minutes)" 
                               @bind-Value="_sessionTimeoutMinutes"
                               Variant="Variant.Outlined"
                               Min="5" Max="480" />
                
                <MudButton Variant="Variant.Outlined" 
                         Color="Color.Error"
                         StartIcon="@Icons.Material.Filled.DeleteForever"
                         OnClick="@ClearAllData"
                         Class="mt-3">
                    Clear All Data
                </MudButton>
            </MudCardContent>
        </MudCard>
    </MudTabPanel>
</MudTabs>

<MudGrid Class="mt-4">
    <MudItem xs="12">
        <MudPaper Class="pa-4 d-flex justify-end">
            <MudButton Variant="Variant.Outlined" 
                     OnClick="@ResetToDefaults"
                     Class="mr-2">
                Reset to Defaults
            </MudButton>
            <MudButton Variant="Variant.Filled" 
                     Color="Color.Primary"
                     OnClick="@SaveSettings">
                Save Settings
            </MudButton>
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    // Agent settings
    private string _defaultWorkingDirectory = Directory.GetCurrentDirectory();
    private int _defaultTimeoutSeconds = 300;
    private bool _enableAutoSave = true;
    private bool _enableLogging = false;
    
    // Interface settings
    private Theme _theme = Theme.Auto;
    private int _fontSize = 14;
    private bool _enableAnimations = true;
    private bool _enableSounds = false;
    private string[] _fontSizeLabels = { "10", "12", "14", "16", "18", "20" };
    
    // Security settings
    private bool _encryptSessions = false;
    private bool _requireAuthentication = false;
    private int _sessionTimeoutMinutes = 60;
    
    public enum Theme
    {
        Light,
        Dark,
        Auto
    }
    
    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }
    
    private async Task LoadSettings()
    {
        try
        {
            // TODO: Load settings from configuration service
            await Task.Delay(1); // Placeholder
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading settings: {ex.Message}");
        }
    }
    
    private async Task SaveSettings()
    {
        try
        {
            // TODO: Save settings via configuration service
            await Task.Delay(1); // Placeholder
            
            // Show success message
            // Snackbar.Add("Settings saved successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving settings: {ex.Message}");
            // Snackbar.Add("Error saving settings", Severity.Error);
        }
    }
    
    private async Task ResetToDefaults()
    {
        _defaultWorkingDirectory = Directory.GetCurrentDirectory();
        _defaultTimeoutSeconds = 300;
        _enableAutoSave = true;
        _enableLogging = false;
        _theme = Theme.Auto;
        _fontSize = 14;
        _enableAnimations = true;
        _enableSounds = false;
        _encryptSessions = false;
        _requireAuthentication = false;
        _sessionTimeoutMinutes = 60;
        
        await SaveSettings();
    }
    
    private async Task ClearAllData()
    {
        // TODO: Implement data clearing
        // Should show confirmation dialog first
        await Task.Delay(1); // Placeholder
    }
}