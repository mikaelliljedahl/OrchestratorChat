@page "/chat/{AgentId?}"
@page "/session/{SessionId?}"
@using Microsoft.AspNetCore.SignalR.Client
@using OrchestratorChat.Web.Models
@using OrchestratorChat.Web.Services
@using OrchestratorChat.Web.Components
@using SignalRResponses = OrchestratorChat.SignalR.Contracts.Responses
@using SignalRRequests = OrchestratorChat.SignalR.Contracts.Requests
@implements IAsyncDisposable
@inject IJSRuntime JSRuntime
@inject IAgentService AgentService
@inject ISessionManager SessionManager
@inject NavigationManager Navigation
@inject ILogger<ChatInterface> Logger

<PageTitle>Chat - @_sessionName</PageTitle>

<MudGrid Class="chat-container">
    <MudItem xs="12" md="3">
        <AgentSidebar Agents="@_agents" 
                     SelectedAgent="@_selectedAgent"
                     OnAgentSelected="@SelectAgent"
                     OnCreateAgent="@ShowCreateAgentDialog" />
    </MudItem>
    
    <MudItem xs="12" md="9">
        <MudPaper Class="chat-panel">
            <MudToolBar>
                <div class="d-flex align-center">
                    <MudText Typo="Typo.h6" Class="mr-3">@(_selectedAgent?.Name ?? "Select an agent")</MudText>
                    @if (_selectedAgent != null)
                    {
                        <MudChip T="string" Size="Size.Small" Color="@GetAgentStatusColor(_selectedAgent.Status)">
                            @_selectedAgent.Status
                        </MudChip>
                    }
                    <div class="ml-3">
                        <HealthPanel OrchestratorHub="@_orchestratorHub"
                                   AgentHub="@_agentHub"
                                   SelectedAgentId="@_selectedAgent?.Id"
                                   ShowDiagnostics="@_showHealthDiagnostics"
                                   OnReconnectRequested="@ReconnectHubs"
                                   OnAgentRetryRequested="@RetryAgentInitialization"
                                   OnHealthUpdated="@OnHealthUpdated" />
                    </div>
                </div>
                <MudSpacer />
                <MudIconButton Icon="@Icons.Material.Filled.History" 
                              OnClick="@ShowHistory" />
                <MudIconButton Icon="@Icons.Material.Filled.AttachFile" 
                              OnClick="@AttachFile" />
                <MudIconButton Icon="@Icons.Material.Filled.Settings" 
                              OnClick="@ShowAgentSettings" />
            </MudToolBar>
            
            <div class="messages-container" @ref="_messagesContainer">
                <CascadingValue Value="@_currentSession">
                    @foreach (var message in _messages)
                    {
                        <MessageBubble Message="@message" />
                    }
                    
                    @if (_isTyping)
                    {
                        <TypingIndicator AgentName="@(_selectedAgent?.Name ?? "Agent")" />
                    }
                    
                    @if (!string.IsNullOrEmpty(_errorMessage))
                    {
                        <MudAlert Severity="Severity.Error" 
                                  Class="ma-3"
                                  ShowCloseIcon="true"
                                  CloseIconClicked="@(() => _errorMessage = null)">
                            <div>
                                <strong>Error:</strong> @_errorMessage
                            </div>
                            @if (_errorMessage.Contains("Claude CLI") || _errorMessage.Contains("not found"))
                            {
                                <div class="mt-2">
                                    <MudText Typo="Typo.caption">
                                        Recommendation: Install Claude CLI and ensure it's authenticated.
                                    </MudText>
                                </div>
                            }
                            else if (_errorMessage.Contains("API key"))
                            {
                                <div class="mt-2">
                                    <MudText Typo="Typo.caption">
                                        Recommendation: Check your API key configuration in Settings.
                                    </MudText>
                                </div>
                            }
                        </MudAlert>
                    }
                </CascadingValue>
            </div>
            
            <MessageInput OnSendMessage="@SendMessage" 
                         IsEnabled="@(!_isProcessing && _selectedAgent != null)"
                         ErrorMessage="@_errorMessage"
                         OnAttach="@(() => AttachFile())" />
            
            @if (_showHealthDiagnostics)
            {
                <div class="mt-2">
                    <HealthPanel OrchestratorHub="@_orchestratorHub"
                               AgentHub="@_agentHub"
                               SelectedAgentId="@_selectedAgent?.Id"
                               ShowDiagnostics="true"
                               ShowOpenRouterStatus="@(_selectedAgent?.Type == Core.Agents.AgentType.Saturn)"
                               OnReconnectRequested="@ReconnectHubs"
                               OnAgentRetryRequested="@RetryAgentInitialization"
                               OnHealthUpdated="@OnHealthUpdated" />
                </div>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

<SessionHistory @bind-IsOpen="_showHistory" OnSessionSelected="@((Core.Sessions.Session session) => LoadSession(session))" />

<CreateAgentDialog IsVisible="_showCreateAgentDialog" 
                   IsVisibleChanged="@((bool visible) => _showCreateAgentDialog = visible)" 
                   OnAgentCreated="@CreateNewAgent" />

@code {
    [Parameter] public string? AgentId { get; set; }
    [Parameter] public string? SessionId { get; set; }
    
    private HubConnection? _agentHub;
    private HubConnection? _orchestratorHub;
    private List<AgentInfo> _agents = new();
    private AgentInfo? _selectedAgent;
    private Core.Sessions.Session? _currentSession;
    private string _sessionName = "Chat";
    private List<ChatMessage> _messages = new();
    private bool _isProcessing = false;
    private bool _isTyping = false;
    private bool _showHistory = false;
    private bool _showCreateAgentDialog = false;
    private ElementReference _messagesContainer;
    private string? _errorMessage;
    private bool _showHealthDiagnostics = false;
    
    // Subscription tracking for proper cleanup
    private readonly HashSet<string> _subscribedAgentIds = new();
    private string? _joinedSessionId;
    
    protected override async Task OnInitializedAsync()
    {
        await InitializeHubs();
        await LoadAgents();
        
        // Handle initial parameters
        await HandleRouteParameters();
        
        await LoadOrCreateSession();
    }
    
    protected override async Task OnParametersSetAsync()
    {
        // Handle parameter changes during navigation
        await HandleRouteParameters();
    }
    
    private async Task HandleRouteParameters()
    {
        if (!string.IsNullOrEmpty(AgentId))
        {
            var targetAgent = _agents.FirstOrDefault(a => a.Id == AgentId);
            if (targetAgent != null && _selectedAgent?.Id != AgentId)
            {
                await SelectAgent(targetAgent);
            }
        }
    }
    
    private async Task InitializeHubs()
    {
        // Initialize Agent Hub
        _agentHub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/agent"))
            .Build();
            
        _agentHub.On<SignalRResponses.AgentResponseDto>("ReceiveAgentResponse", async (response) =>
        {
            _isTyping = false;
            _errorMessage = null;
            _showHealthDiagnostics = false; // Hide diagnostics on successful response
            
            if (response.Response.Type == Core.Messages.ResponseType.Text)
            {
                var existingMessage = _messages.FirstOrDefault(m => m.Id == response.Response.MessageId);
                if (existingMessage != null)
                {
                    existingMessage.Content += response.Response.Content;
                }
                else
                {
                    _messages.Add(new ChatMessage
                    {
                        Id = response.Response.MessageId,
                        Content = response.Response.Content,
                        Role = Core.Messages.MessageRole.Assistant,
                        AgentId = response.AgentId,
                        Timestamp = DateTime.UtcNow
                    });
                }
                
                await InvokeAsync(StateHasChanged);
                await ScrollToBottom();
            }
        });
        
        _agentHub.On<SignalRResponses.ErrorResponse>("ReceiveError", async (error) =>
        {
            _isTyping = false;
            _isProcessing = false;
            _errorMessage = error.Error;
            _showHealthDiagnostics = true; // Show diagnostics when errors occur
            await InvokeAsync(StateHasChanged);
        });
        
        // Initialize Orchestrator Hub
        _orchestratorHub = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hubs/orchestrator"))
            .Build();
            
        _orchestratorHub.On<Core.Sessions.Session>("SessionCreated", async (session) =>
        {
            _currentSession = session;
            _sessionName = session.Name;
            await InvokeAsync(StateHasChanged);
        });
        
        await _agentHub.StartAsync();
        await _orchestratorHub.StartAsync();
    }
    
    private async Task LoadOrCreateSession()
    {
        try
        {
            if (!string.IsNullOrEmpty(SessionId))
            {
                // Load specific session
                _currentSession = await SessionManager.GetSessionAsync(SessionId);
                if (_currentSession != null)
                {
                    _sessionName = _currentSession.Name;
                    await LoadMessages();
                    await JoinSessionGroups();
                    return;
                }
            }
            
            // Check for current session
            _currentSession = await SessionManager.GetCurrentSessionAsync();
            if (_currentSession != null)
            {
                _sessionName = _currentSession.Name;
                await LoadMessages();
                await JoinSessionGroups();
                return;
            }
            
            // No session exists and we have a selected agent - create implicit session
            if (_selectedAgent != null)
            {
                await CreateImplicitSession();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading or creating session");
            _errorMessage = $"Error setting up chat session: {ex.Message}";
        }
    }
    
    private async Task CreateImplicitSession()
    {
        if (_selectedAgent == null || _orchestratorHub == null) return;
        
        try
        {
            var sessionName = $"Chat with {_selectedAgent.Name}";
            var createRequest = new Core.Sessions.CreateSessionRequest
            {
                Name = sessionName,
                Type = Core.Sessions.SessionType.SingleAgent,
                AgentIds = new List<string> { _selectedAgent.Id },
                WorkingDirectory = Directory.GetCurrentDirectory()
            };
            
            var response = await _orchestratorHub.InvokeAsync<SignalRResponses.SessionCreatedResponse>("CreateSession", createRequest);
            if (response.Success && response.Session != null)
            {
                _currentSession = response.Session;
                _sessionName = response.Session.Name;
                
                // Subscribe to agent updates
                await SubscribeToAgent(_selectedAgent.Id);
                
                Logger.LogInformation("Implicit session created: {SessionId}", _currentSession.Id);
            }
            else
            {
                _errorMessage = response.Error ?? "Failed to create session";
                Logger.LogError("Failed to create implicit session: {Error}", _errorMessage);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error creating implicit session");
            _errorMessage = $"Failed to create chat session: {ex.Message}";
        }
    }
    
    private async Task JoinSessionGroups()
    {
        if (_currentSession == null || _orchestratorHub == null || _agentHub == null) return;
        
        try
        {
            // Join session group in orchestrator hub
            await _orchestratorHub.InvokeAsync("JoinSession", _currentSession.Id);
            _joinedSessionId = _currentSession.Id;
            Logger.LogInformation("Joined session group {SessionId}", _currentSession.Id);
            
            // Subscribe to agent updates for each agent in session
            foreach (var agentId in _currentSession.ParticipantAgentIds ?? new List<string>())
            {
                await SubscribeToAgent(agentId);
            }
            
            // Also ensure we're subscribed to the currently selected agent (if not already in session)
            if (_selectedAgent != null && !(_currentSession.ParticipantAgentIds?.Contains(_selectedAgent.Id) ?? false))
            {
                await SubscribeToAgent(_selectedAgent.Id);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error joining session groups for session {SessionId}", _currentSession.Id);
        }
    }
    
    private async Task LoadAgents()
    {
        try
        {
            _agents = await AgentService.GetConfiguredAgentsAsync();
            
            // Auto-select agent if none is currently selected
            if (_selectedAgent == null && _agents.Any())
            {
                // Try to get the default agent first
                var defaultAgent = await AgentService.GetDefaultAgentAsync();
                if (defaultAgent != null && _agents.Any(a => a.Id == defaultAgent.Id))
                {
                    _selectedAgent = defaultAgent;
                }
                else
                {
                    // Fall back to the first available agent
                    _selectedAgent = _agents.FirstOrDefault();
                }
                
                // Subscribe to the selected agent if we have SignalR connection
                if (_selectedAgent != null && _agentHub != null)
                {
                    try
                    {
                        await SubscribeToAgent(_selectedAgent.Id);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogError(ex, "Error subscribing to auto-selected agent {AgentId}", _selectedAgent.Id);
                    }
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading agents: {ex.Message}");
        }
    }
    
    private Task LoadMessages()
    {
        if (_currentSession == null) return Task.CompletedTask;
        
        try
        {
            // Convert from session messages to chat messages
            _messages = _currentSession.Messages.Select(m => new ChatMessage
            {
                Id = m.Id,
                Content = m.Content,
                Role = m.Role,
                AgentId = m.SenderId,
                Timestamp = m.Timestamp,
                Attachments = m.Attachments?.ToList()
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading messages: {ex.Message}");
        }
        
        return Task.CompletedTask;
    }
    
    private async Task SelectAgent(AgentInfo agent)
    {
        if (_selectedAgent?.Id == agent.Id)
            return; // Already selected
            
        var previousAgentId = _selectedAgent?.Id;
        _selectedAgent = agent;
        
        if (_agentHub != null)
        {
            try
            {
                // Unsubscribe from previous agent
                if (!string.IsNullOrEmpty(previousAgentId))
                {
                    await UnsubscribeFromAgent(previousAgentId);
                }
                
                // Subscribe to new agent
                await SubscribeToAgent(agent.Id);
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error updating agent subscription from {PreviousAgent} to {NewAgent}", 
                    previousAgentId, agent.Id);
                _errorMessage = $"Failed to connect to agent: {ex.Message}";
            }
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task SendMessage(string content)
    {
        if (string.IsNullOrWhiteSpace(content) || _selectedAgent == null || _agentHub == null)
            return;
            
        _isProcessing = true;
        _isTyping = true;
        _errorMessage = null;
        
        // Ensure we have a session before sending
        if (_currentSession == null)
        {
            await CreateImplicitSession();
            if (_currentSession == null)
            {
                _isProcessing = false;
                _isTyping = false;
                _errorMessage = "Unable to create chat session. Please try again.";
                _showHealthDiagnostics = true;
                await InvokeAsync(StateHasChanged);
                return;
            }
        }
        
        // Add user message
        var userMessage = new ChatMessage
        {
            Id = Guid.NewGuid().ToString(),
            Content = content,
            Role = Core.Messages.MessageRole.User,
            Timestamp = DateTime.UtcNow
        };
        _messages.Add(userMessage);
        
        try
        {
            // Send to agent via SignalR
            var request = new SignalRRequests.AgentMessageRequest
            {
                AgentId = _selectedAgent.Id,
                SessionId = _currentSession.Id,
                Content = content
            };
            
            await _agentHub.InvokeAsync("SendAgentMessage", request);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending message to agent {AgentId}", _selectedAgent.Id);
            _errorMessage = $"Failed to send message: {ex.Message}";
            _showHealthDiagnostics = true;
            _isTyping = false;
        }
        
        _isProcessing = false;
        await ScrollToBottom();
    }
    
    private async Task ScrollToBottom()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("scrollToBottom", _messagesContainer);
        }
        catch
        {
            // Ignore JS errors
        }
    }
    
    private void ShowHistory()
    {
        _showHistory = true;
    }
    
    private Task AttachFile()
    {
        // TODO: Implement file attachment
        return Task.CompletedTask;
    }
    
    private void ShowAgentSettings()
    {
        // TODO: Implement agent settings
    }
    
    private void ShowCreateAgentDialog()
    {
        Console.WriteLine("ChatInterface.ShowCreateAgentDialog: Method called, setting _showCreateAgentDialog = true");
        _showCreateAgentDialog = true;
        StateHasChanged();
        Console.WriteLine($"ChatInterface.ShowCreateAgentDialog: Dialog visibility set to: {_showCreateAgentDialog}");
    }
    
    private async Task CreateNewAgent(Core.Agents.AgentConfiguration configuration)
    {
        Console.WriteLine($"ChatInterface.CreateNewAgent: Method called with configuration for agent '{configuration.Name}'");
        try
        {
            Console.WriteLine($"ChatInterface.CreateNewAgent: Calling AgentService.CreateAgentAsync");
            var newAgent = await AgentService.CreateAgentAsync(configuration.Type, configuration);
            Console.WriteLine($"ChatInterface.CreateNewAgent: Agent created successfully with ID '{newAgent.Id}'");
            
            Console.WriteLine($"ChatInterface.CreateNewAgent: Refreshing agents list");
            await LoadAgents(); // Refresh the agents list
            
            // Select the newly created agent
            _selectedAgent = _agents.FirstOrDefault(a => a.Id == newAgent.Id);
            Console.WriteLine($"ChatInterface.CreateNewAgent: Selected agent: {(_selectedAgent?.Name ?? "null")}");
            
            // Set as default if no default agent exists
            try
            {
                var existingDefault = await AgentService.GetDefaultAgentAsync();
                if (existingDefault == null)
                {
                    await AgentService.SetDefaultAgentAsync(newAgent.Id);
                    Console.WriteLine($"ChatInterface.CreateNewAgent: Set agent '{newAgent.Name}' as default");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Warning: Failed to set agent as default: {ex.Message}");
            }
            
            StateHasChanged();
            Console.WriteLine($"ChatInterface.CreateNewAgent: Method completed successfully");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"ChatInterface.CreateNewAgent: Error creating agent: {ex.Message}");
            Console.WriteLine($"ChatInterface.CreateNewAgent: Exception details: {ex}");
            // TODO: Show error message to user
        }
    }
    
    private Task LoadSession(Core.Sessions.Session session)
    {
        Navigation.NavigateTo($"/session/{session.Id}");
        return Task.CompletedTask;
    }
    
    private Color GetAgentStatusColor(AgentStatus status)
    {
        return status switch
        {
            AgentStatus.Ready => Color.Success,
            AgentStatus.Busy => Color.Warning,
            AgentStatus.Processing => Color.Warning,
            AgentStatus.Error => Color.Error,
            AgentStatus.Initializing => Color.Info,
            AgentStatus.Shutdown => Color.Default,
            AgentStatus.Uninitialized => Color.Secondary,
            AgentStatus.Unknown => Color.Default,
            _ => Color.Default
        };
    }
    
    // Health panel methods
    private async Task ReconnectHubs()
    {
        try
        {
            if (_agentHub?.State != HubConnectionState.Connected)
            {
                await _agentHub?.StartAsync()!;
            }
            
            if (_orchestratorHub?.State != HubConnectionState.Connected)
            {
                await _orchestratorHub?.StartAsync()!;
            }
            
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error reconnecting hubs");
            _errorMessage = $"Failed to reconnect: {ex.Message}";
        }
    }
    
    private async Task RetryAgentInitialization(string agentId)
    {
        try
        {
            // Reload agents to refresh status
            await LoadAgents();
            _selectedAgent = _agents.FirstOrDefault(a => a.Id == agentId);
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error retrying agent initialization for {AgentId}", agentId);
            _errorMessage = $"Failed to retry agent initialization: {ex.Message}";
        }
    }
    
    private async Task OnHealthUpdated()
    {
        // Auto-show diagnostics panel when there are blocking errors
        // Hide when everything is OK or user manually dismissed
        if (!string.IsNullOrEmpty(_errorMessage))
        {
            _showHealthDiagnostics = true;
        }
        
        await InvokeAsync(StateHasChanged);
    }
    
    private async Task SubscribeToAgent(string agentId)
    {
        if (_agentHub == null || string.IsNullOrEmpty(agentId) || _subscribedAgentIds.Contains(agentId))
            return;
            
        try
        {
            await _agentHub.InvokeAsync("SubscribeToAgent", agentId);
            _subscribedAgentIds.Add(agentId);
            Logger.LogInformation("Subscribed to agent {AgentId}", agentId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to subscribe to agent {AgentId}", agentId);
            throw;
        }
    }
    
    private async Task UnsubscribeFromAgent(string agentId)
    {
        if (_agentHub == null || string.IsNullOrEmpty(agentId) || !_subscribedAgentIds.Contains(agentId))
            return;
            
        try
        {
            await _agentHub.InvokeAsync("UnsubscribeFromAgent", agentId);
            _subscribedAgentIds.Remove(agentId);
            Logger.LogInformation("Unsubscribed from agent {AgentId}", agentId);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to unsubscribe from agent {AgentId}", agentId);
            // Don't throw on unsubscribe errors as they're non-critical
        }
    }
    
    public async ValueTask DisposeAsync()
    {
        try
        {
            // Clean up subscriptions before disposing hubs
            if (_agentHub is not null && _agentHub.State == HubConnectionState.Connected)
            {
                // Unsubscribe from all subscribed agents
                foreach (var agentId in _subscribedAgentIds.ToList())
                {
                    await UnsubscribeFromAgent(agentId);
                }
            }
            
            if (_orchestratorHub is not null && _orchestratorHub.State == HubConnectionState.Connected)
            {
                // Leave session group if joined
                if (!string.IsNullOrEmpty(_joinedSessionId))
                {
                    try
                    {
                        await _orchestratorHub.InvokeAsync("LeaveSession", _joinedSessionId);
                        Logger.LogInformation("Left session group {SessionId} during disposal", _joinedSessionId);
                    }
                    catch (Exception ex)
                    {
                        Logger.LogWarning(ex, "Failed to leave session group {SessionId} during disposal", _joinedSessionId);
                    }
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during subscription cleanup in dispose");
        }
        finally
        {
            // Always dispose the hubs
            if (_agentHub is not null)
            {
                await _agentHub.DisposeAsync();
            }
            
            if (_orchestratorHub is not null)
            {
                await _orchestratorHub.DisposeAsync();
            }
        }
    }
}