@page "/orchestrator"
@using OrchestratorChat.Web.Models
@using OrchestratorChat.Web.Services
@using OrchestratorChat.Web.Components
@inject IOrchestrationService OrchestrationService
@inject IAgentService AgentService

<PageTitle>Multi-Agent Orchestrator</PageTitle>

<MudGrid>
    <MudItem xs="12" md="8">
        <MudCard>
            <MudCardContent>
                <MudText Typo="Typo.h5" Class="mb-3">Orchestration Planning</MudText>
                
                <MudTextField @bind-Value="_goal" 
                            Label="Goal" 
                            Variant="Variant.Outlined"
                            Lines="3"
                            HelperText="Describe what you want to accomplish" />
                
                <MudSelect @bind-Value="_strategy" 
                         Label="Strategy" 
                         Variant="Variant.Outlined"
                         Class="mt-3">
                    <MudSelectItem Value="Core.Orchestration.OrchestrationStrategy.Sequential">Sequential</MudSelectItem>
                    <MudSelectItem Value="Core.Orchestration.OrchestrationStrategy.Parallel">Parallel</MudSelectItem>
                    <MudSelectItem Value="Core.Orchestration.OrchestrationStrategy.Adaptive">Adaptive</MudSelectItem>
                </MudSelect>
                
                <MudText Typo="Typo.subtitle1" Class="mt-3 mb-2">Select Agents</MudText>
                <div class="d-flex flex-wrap gap-2">
                    @foreach (var agent in _availableAgents)
                    {
                        <MudChip T="string" Value="@agent.Id" 
                                Color="@(_selectedAgentIds.Contains(agent.Id) ? Color.Primary : Color.Default)" 
                                Variant="Variant.Outlined"
                                OnClick="@(() => ToggleAgent(agent.Id))">
                            @agent.Name
                        </MudChip>
                    }
                </div>
                
                <MudButton Variant="Variant.Filled" 
                         Color="Color.Primary"
                         OnClick="@CreatePlan"
                         Disabled="@_isCreatingPlan"
                         Class="mt-3">
                    @if (_isCreatingPlan)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                        <span class="ml-2">Creating Plan...</span>
                    }
                    else
                    {
                        <span>Create Plan</span>
                    }
                </MudButton>
            </MudCardContent>
        </MudCard>
        
        @if (_currentPlan != null)
        {
            <OrchestrationPlan Plan="@_currentPlan" 
                              OnExecute="@ExecutePlan"
                              Progress="@_progress" />
        }
    </MudItem>
    
    <MudItem xs="12" md="4">
        <OrchestrationTimeline Steps="@_executedSteps" />
    </MudItem>
</MudGrid>

@code {
    private string _goal = "";
    private Core.Orchestration.OrchestrationStrategy _strategy = Core.Orchestration.OrchestrationStrategy.Adaptive;
    private List<AgentInfo> _availableAgents = new();
    private HashSet<string> _selectedAgentIds = new();
    private Core.Orchestration.OrchestrationPlan? _currentPlan;
    private OrchestratorChat.Web.Models.OrchestrationProgress? _progress;
    private List<ExecutedStep> _executedSteps = new();
    private bool _isCreatingPlan = false;
    
    protected override async Task OnInitializedAsync()
    {
        await LoadAvailableAgents();
    }
    
    private async Task LoadAvailableAgents()
    {
        try
        {
            _availableAgents = await AgentService.GetConfiguredAgentsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading agents: {ex.Message}");
        }
    }
    
    private void ToggleAgent(string agentId)
    {
        if (_selectedAgentIds.Contains(agentId))
        {
            _selectedAgentIds.Remove(agentId);
        }
        else
        {
            _selectedAgentIds.Add(agentId);
        }
    }
    
    private async Task CreatePlan()
    {
        if (string.IsNullOrWhiteSpace(_goal) || _selectedAgentIds.Count == 0)
            return;
            
        _isCreatingPlan = true;
        
        try
        {
            var request = new Core.Orchestration.OrchestrationRequest
            {
                Goal = _goal,
                Strategy = _strategy,
                AvailableAgentIds = _selectedAgentIds.ToList(),
                MaxSteps = 10,
                TimeoutMinutes = 30
            };
            
            _currentPlan = await OrchestrationService.CreatePlanAsync(request);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating plan: {ex.Message}");
        }
        finally
        {
            _isCreatingPlan = false;
        }
    }
    
    private async Task ExecutePlan()
    {
        if (_currentPlan == null) return;
        
        try
        {
            var progress = new Progress<OrchestratorChat.Web.Models.OrchestrationProgress>(p =>
            {
                _progress = p;
                InvokeAsync(StateHasChanged);
            });
            
            var result = await OrchestrationService.ExecutePlanAsync(_currentPlan, progress);
            
            // Update timeline with results
            _executedSteps = result.StepResults.Select(r => new ExecutedStep
            {
                Name = r.StepName,
                Status = r.Success ? "Success" : "Failed",
                Duration = r.Duration,
                Output = r.Output?.ToString() ?? "",
                Timestamp = r.StartTime
            }).ToList();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error executing plan: {ex.Message}");
        }
    }
}